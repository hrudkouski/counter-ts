{"version":3,"sources":["App.module.css","components/Display.module.css","components/Button.module.css","components/Display.tsx","components/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","errorClass","value","errorValue","s","className","display","errorDisplay","errorText","numberDisplay","Button","disabled","onClickChangeValue","onClick","btn","title","App","useState","setValue","min","setMin","max","setMax","error","setError","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","app","wrapper","inputDisplay","inputTitle","inputLocal","onChange","e","currentTarget","valueAsNumber","type","buttons","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10809113.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2YlnF\",\"wrapper\":\"App_wrapper__1ezzb\",\"buttons\":\"App_buttons__2hN6a\",\"inputDisplay\":\"App_inputDisplay__18I1K\",\"inputLocal\":\"App_inputLocal__3_kyQ\",\"inputTitle\":\"App_inputTitle__1Soo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__UhpKW\",\"errorValue\":\"Display_errorValue__3XkQO\",\"errorText\":\"Display_errorText__3osWm\",\"numberDisplay\":\"Display_numberDisplay__ON_2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__1Vg5B\"};","import React from 'react';\nimport s from './Display.module.css'\n\ntype DisplayPropsType = {\n    value: number\n    errorValue: number\n    errorDisplay: boolean\n}\n\nexport function Display(props: DisplayPropsType) {\n\n    const errorClass = props.value === props.errorValue ? `${s.errorValue}` : '';\n\n    return (\n        <div className={`${s.display} ${errorClass}`}>\n            {props.errorDisplay\n                ? <div className={s.errorText}>Incorrect value!</div>\n                : <div className={s.numberDisplay}>{props.value}</div>}\n        </div>\n    );\n}\n","import React from 'react';\nimport s from './Button.module.css'\n\ntype ButtonPropsType = {\n    title: string\n    onClickChangeValue: () => void\n    disabled?: boolean\n}\n\nexport function Button({disabled, onClickChangeValue, ...props}: ButtonPropsType) {\n\n    const buttonClickHandler = () => onClickChangeValue();\n\n    return <button\n        disabled={disabled}\n        onClick={buttonClickHandler}\n        className={s.btn}>{props.title}\n    </button>\n}\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './App.module.css';\nimport {Display} from \"./components/Display\";\nimport {Button} from \"./components/Button\";\n\nfunction App() {\n\n    const [value, setValue] = useState<number>(0);\n    const [min, setMin] = useState<number>(0)\n    const [max, setMax] = useState<number>(5)\n    const [error, setError] = useState<boolean>(false)\n\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('maxValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setMax(newValue);\n        }\n    }, [])\n    useEffect(() => {\n        let valueAsString = localStorage.getItem('minValue')\n        if (valueAsString) {\n            let newValue = JSON.parse(valueAsString)\n            setMin(newValue);\n        }\n    }, [])\n\n    const setHandler = () => {\n        localStorage.setItem('maxValue', JSON.stringify(max))\n        localStorage.setItem('minValue', JSON.stringify(min))\n        setValue(min)\n    }\n    const changeMinValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.valueAsNumber;\n        setMin(value)\n\n        if (value < 0 || value >= max) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n    }\n    const changeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.valueAsNumber;\n        setMax(value)\n\n        if (value < 0 || value <= min) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n    }\n    function increaseCounterValue() {\n        setValue(value === max ? value : value + 1);\n    }\n    function decreaseCounterValue() {\n        setValue(value === min ? value : value - 1);\n    }\n    function resetCounterValue() {\n        setValue(min);\n    }\n\n    return (\n        <div className={s.app}>\n            <div className={s.wrapper}>\n                <div className={s.inputDisplay}>\n                    <div>\n                        <span className={s.inputTitle}>Max Value: </span>\n                        <input\n                            className={s.inputLocal}\n                            onChange={changeMaxValueHandler}\n                            value={max}\n                            type=\"number\"\n                        />\n                    </div>\n                    <div>\n                        <span className={s.inputTitle}>Min Value: </span>\n                        <input\n                            className={s.inputLocal}\n                            onChange={changeMinValueHandler}\n                            value={min}\n                            type=\"number\"\n                        />\n                    </div>\n                </div>\n                <div className={s.buttons}>\n                    <Button\n                        title={'set'}\n                        disabled={error}\n                        onClickChangeValue={setHandler}\n                    />\n                </div>\n            </div>\n            <div className={s.wrapper}>\n                <Display\n                    errorDisplay={error}\n                    errorValue={max}\n                    value={value}\n                />\n                <div className={s.buttons}>\n                    <Button\n                        disabled={value === max}\n                        title={'+'}\n                        onClickChangeValue={increaseCounterValue}\n                    />\n                    <Button\n                        disabled={value === min}\n                        title={'-'}\n                        onClickChangeValue={decreaseCounterValue}\n                    />\n                    <Button\n                        title={'res'}\n                        onClickChangeValue={resetCounterValue}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}